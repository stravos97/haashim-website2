---
import type { Project } from '../data/cvData';

export interface Props {
  project: Project;
}

const { project } = Astro.props;
---

<article class="project-card">
  <div class="project-header">
    <h3>{project.name}</h3>
    <div class="project-links">
      {project.github && (
        <a href={`https://${project.github}`} target="_blank" rel="noopener noreferrer" aria-label="View on GitHub">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
          </svg>
        </a>
      )}
      {project.live && (
        <a href={`https://${project.live}`} target="_blank" rel="noopener noreferrer" aria-label="View live site">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
            <polyline points="15 3 21 3 21 9"></polyline>
            <line x1="10" y1="14" x2="21" y2="3"></line>
          </svg>
        </a>
      )}
    </div>
  </div>
  
  <p class="project-description">{project.description}</p>
  
  <div class="tech-stack">
    {project.techStack.map((tech) => (
      <span class="tech-tag">{tech}</span>
    ))}
  </div>
  
  {project.metrics && project.metrics.length > 0 && (
    <div class="project-metrics">
      {project.metrics.map((metric) => (
        <div class="metric">{metric}</div>
      ))}
    </div>
  )}
  
  <ul class="project-achievements">
    {project.achievements.map((achievement) => (
      <li>{achievement}</li>
    ))}
  </ul>
</article>

<style>
  .project-card {
    padding: var(--spacing-xl);
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-lg);
    transition: all var(--transition-base);
    position: relative;
    overflow: hidden;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--color-gradient-primary);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform var(--transition-base);
  }

  .project-card:hover::before {
    transform: scaleX(1);
  }

  .project-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-xl);
    border-color: var(--color-primary-light);
  }

  .project-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--spacing-md);
  }

  .project-header h3 {
    color: var(--color-text);
    font-size: 1.2rem;
    font-weight: 600;
    margin: 0;
    flex: 1;
    transition: color var(--transition-base);
  }

  .project-card:hover h3 {
    color: var(--color-primary);
  }

  .project-links {
    display: flex;
    gap: var(--spacing-sm);
  }

  .project-links a {
    color: var(--color-text-secondary);
    transition: all var(--transition-base);
    padding: var(--spacing-xs);
    border-radius: var(--radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .project-links a:hover {
    color: var(--color-primary);
    background: var(--color-bg-secondary);
    transform: scale(1.1);
  }

  .project-description {
    color: var(--color-text-secondary);
    font-size: 0.95rem;
    line-height: 1.6;
    margin-bottom: var(--spacing-md);
  }

  .tech-stack {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-xs);
    margin-bottom: var(--spacing-md);
  }

  .tech-tag {
    background: var(--color-bg-secondary);
    color: var(--color-text-secondary);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--radius-full);
    font-size: 0.8rem;
    font-family: var(--font-mono);
    border: 1px solid var(--color-border);
    transition: all var(--transition-base);
  }

  .tech-tag:hover {
    background: var(--color-primary);
    color: var(--color-text-inverse);
    transform: scale(1.05);
  }

  .project-metrics {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
  }

  .metric {
    background: var(--color-bg-tertiary);
    padding: var(--spacing-sm);
    border-radius: var(--radius-md);
    font-size: 0.85rem;
    text-align: center;
    color: var(--color-text-secondary);
    border: 1px solid var(--color-border-light);
  }

  .project-achievements {
    list-style: none;
    padding: 0;
    margin: 0;
    flex-grow: 1;
  }

  .project-achievements li {
    position: relative;
    padding-left: var(--spacing-lg);
    margin-bottom: var(--spacing-sm);
    color: var(--color-text-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
  }

  .project-achievements li::before {
    content: 'â–¸';
    position: absolute;
    left: 0;
    color: var(--color-primary);
    font-weight: bold;
  }

  .project-achievements li:last-child {
    margin-bottom: 0;
  }

  @media (max-width: 768px) {
    .project-card {
      padding: var(--spacing-lg);
    }

    .project-metrics {
      grid-template-columns: 1fr;
    }
  }
</style>